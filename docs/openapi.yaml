openapi: 3.0.1
info:
  title: Bugtracker API
  description: Bugtracker API project for demo purposes only. This API only supports the most commonly used HTTP status codes. These include 200 (OK), 201 (Created), 400 (Bad Request), 401 (Unauthorized), 403 (Forbidden), 404 (Not Found), and 500 (Internal Server Error). For a full list of HTTP status codes, see [RFC 7231](https://tools.ietf.org/html/rfc7231#section-6).
  license:
    name: MIT License (MIT)
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
  contact:
    email: devulogijrp.github@gmail.com
servers:
  - url: http://localhost:8080/api/v1
paths:
  /users:
    description: User operations
    post:
      description: Create a new user
      operationId: createUser
      summary: Create a new user
      requestBody:
        description: User to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        400:
          description: Bad request
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    get:
      description: Get all users
      operationId: getAllUsers
      summary: Returns a list of users
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'

  /users/{id}:
    description: Get a user by id
    summary: Returns a user by id
    get:
      description: Get a user by id
      operationId: getUserById
      summary: Returns a user by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
            example: 5f9f1c9b9b9b9b9b9b9b9b9b
          required: true
          description: Numeric ID of the user to get
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
    put:
      description: Update an existing user by id
      operationId: updateUser
      summary: Update an existing user by id
      requestBody:
        description: User object that needs to be updated to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
    delete:
      description: Delete a user by id
      operationId: deleteUser
      summary: Delete a user by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
            example: 5f9f1c9b9b9b9b9b9b9b9b9b
          required: true
          description: Numeric ID of the user to delete
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: boolean
                example: true
        404:
          description: User not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

components:
  schemas:
    users:
      type: array
      items:
        properties:
          _id:
            type: string
            example: 5f9f1c9b9b9b9b9b9b9b9b9b
          username:
            type: string
            example: jveux89
          password:
            type: string
            example: 5de3884ca729a97bfd30f178c695c134e0196b755133d6252fc42edeba1e7ea971cf2da75a458a6e3b9021ae91799689aa5b180f2857b4480cf557c2649eda58
          email:
            type: string
            example: jveux89@example.com
          role:
            type: string
            example: user
          bugs:
            $ref: '#/components/schemas/bugs'
          created_at:
            type: string
            example: 2020-10-30T12:00:00.000Z
          updated_at:
            type: string
            example: 2020-10-30T12:00:00.000Z
    user:
      type: object
      properties:
        _id:
          type: string
          example: 5f9f1c9b9b9b9b9b9b9b9b9b
        username:
          type: string
          example: jveux89
        password:
          type: string
          example: 5de3884ca729a97bfd30f178c695c134e0196b755133d6252fc42edeba1e7ea971cf2da75a458a6e3b9021ae91799689aa5b180f2857b4480cf557c2649eda58
        email:
          type: string
          example: jveux89@example.com
        role:
          type: string
          example: user
        bugs:
          $ref: '#/components/schemas/bugs'
        created_at:
          type: string
          example: 2020-10-30T12:00:00.000Z
        updated_at:
          type: string
          example: 2020-10-30T12:00:00.000Z
    bugs:
      type: array
      items:
        properties:
          _id:
            type: string
            example: 5f9f1c9b9b9b9b9b9b9b9b9b
          title:
            type: string
            example: Bug title
          description:
            type: string
            example: Bug description
          status:
            type: string
            example: open
          priority:
            type: string
            example: low
          created_at:
            type: string
            example: 2020-10-29T12:00:00.000Z
          updated_at:
            type: string
            example: 2020-10-29T12:00:00.000Z
    bug:
      type: object
      properties:
        _id:
          type: string
          example: 5f9f1c9b9b9b9b9b9b9b9b9b
        title:
          type: string
          example: Bug title
        description:
          type: string
          example: Bug description
        status:
          type: string
          example: open
        priority:
          type: string
          example: low
        created_at:
          type: string
          example: 2020-10-29T12:00:00.000Z
        updated_at:
          type: string
          example: 2020-10-29T12:00:00.000Z
    error:
      type: object
      properties:
        message:
          type: string
          example: Error message
        status:
          type: string
          example: 500
        stack:
          type: string
          example: Error stack
